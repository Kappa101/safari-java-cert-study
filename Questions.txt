Questions

1) Which are valid:

A) var x = "Hello";
B) var x [] = new int[10];
C) public static void counter(var p) {}
D) public var x = "Hello";
E) for (var x : myList)


2) What is the output of toString on h:

A) Crash
B) Date...
C) Holiday ...  

3) Given:

class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x;
    }
  }
and:
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150;
    a.setVal(140);
    System.out.println(a.value);

What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime


4)  Given:
class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }

  class Z extends Y {
    static String sayHi() { return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }

and:

    Y y = new Z();
    System.out.println(y.sayHi() + ", " + y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

5) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }
and:
  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

and:
    Base b = new Sub();
    b.doOtherStuff();

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

6) Given:
    Base b = new Sub();
    ((StringBuilder)b).concat("x");

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

6) Given:
    Base b = new Sub();
    ((Runnable)b).run();

What is the result?
    A) the "run" method executes
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

7) Given:
class Base {
  int x;
  Base(int x) { this.x = x; }
}
and:
class Sub extends Base { // line n1
// implicitly contains
//  Sub() {
//    super();
//  }
}
and:
Base b = new Sub(); // line n2
System.out.println(b.x);

What is the result?
A) 0
B) an undefined number
C) Exception at runtime
D) Compilation fails at line n1
E) Compilation fails at line n2

8) Given

int x;
int y = 99;
if (y > 50) x = 10;
sout("x is " + x);

What is the result?
A) x is 10
B) x is 0
C) Exception
D) Compilation failure

9) Given:

class Base {
 private Base() {}
}

Which are true?
A) a call to new Base() will invoke the constructor of Object with no arguments
B) A subclass of Base must have constructor(s) that invoke super() with no arguments
C) Base cannot be subclassed
D) Base does not compile

10) Given:
class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
}

class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
}

In the Base and Sub classes, which are true in isolation?
    A) doBaseStuff in Base can be marked public without causing errors
    B) doBaseStuff in Base can be marked private without causing errors
    C) doBaseStuff in Sub can be marked public without causing errors
    D) doBaseStuff in Sub can be marked protected without causing errors
    E) doBaseStuff in Sub can be marked private without causing errors

11) Given:
  class Base2 {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }
and:
  class Sub2 extends Base2 {
    void doBaseStuff(int x) {
      System.out.println("doSubStuff");
    }
  }
In the Base2 and Sub2 classes, which are true in isolation?
    A) doBaseStuff in Base2 can be marked public without causing errors
    B) doBaseStuff in Base2 can be marked private without causing errors
    C) doBaseStuff in Sub2 can be marked public without causing errors
    D) doBaseStuff in Sub2 can be marked protected without causing errors
    E) doBaseStuff in Sub2 can be marked private without causing errors

12) Given:
  class X {
    public int getValue() {return 1;}
  }

which of these methods may individually be added to a subclass of X?

    A) public int getValue(int x) {return 1;}
    B) public String getValue() {return "Hello";}
    C) public String getValue(int x) {return "Hello";}
    D) public int getValue() { return 3; }
    E) float getValue(int x) { return 3.14F; } 

13) Given:
  class Q23Base {
    public Q23Base get() { return null; }
    public int getInt() { return 1; }
  }
  class Q23Sub extends Q23Base // class body follows ...

Which methods may individually be added to Q23Sub?
    A) public Q23Base get() { return null; }
    B) public Q23Sub get() { return null; }
    C) public Runnable get() { return null; }
    D) public long getInt() { return 1; }
    E) public short getInt() { return (short)1; }

14) Given:
class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
}
class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
}

In the Base and Sub classes, which are true in isolation?
    A) doBaseStuff in Base can be marked throws Exception without causing errors
    B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
    C) doBaseStuff in Sub can be marked throws Exception without causing errors
    D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
    E) if doBaseStuff in Base were marked throws Exception,
       then doBaseStuff in Sub can be marked throws IOException without causing errors
